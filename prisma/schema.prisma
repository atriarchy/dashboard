// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum AccessRole {
    ADMIN
    ARTIST
}

enum ProfilePrivacy {
    PRIVATE
}

enum ProjectStatus {
    DRAFT
    ACTIVE
    CLOSED
    RELEASED
}

enum TrackCollaboratorRole {
    MANAGER
    EDITOR
    CONTRIBUTOR
}

enum TrackType {
    ORIGINAL
    PARODY
    COVER
}

enum TrackMusicStatus {
    IDEA
    DEMO
    WRITING
    PRODUCTION
    RECORDING
    MIX_MASTER
    ABANDONED
    FINISHED
}

enum TrackVisualStatus {
    SEARCHING
    CONCEPT
    WORKING
    POLISHING
    ABANDONED
    FINISHED
}

enum TrackAuditLogAction {
    CREATE_TRACK
    UPDATE_TRACK
    CREATE_COLLABORATOR
    UPDATE_COLLABORATOR
    DELETE_COLLABORATOR
    ACCEPT_COLLABORATOR_INVITE
    DECLINE_COLLABORATOR_INVITE
}

model Access {
    id                      String     @id @default(cuid())
    provider                String
    providerAccountId       String
    providerAccountUsername String
    role                    AccessRole
    note                    String?
}

model Profile {
    id        String         @id @default(cuid())
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String         @unique
    username  String         @unique
    name      String
    bio       String?
    legalName String? /// @encrypted
    country   String? /// @encrypted
    email     String /// @encrypted
    phone     String? /// @encrypted
    pro       ProProfile?
    links     ProfileLink[]
    privacy   ProfilePrivacy
    createdAt DateTime       @default(now())
    updatedAt DateTime       @default(now()) @updatedAt
}

model ProProfile {
    id        String  @id @default(cuid())
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String  @unique
    member    String /// @encrypted
    country   String /// @encrypted
    name      String /// @encrypted
    number    String /// @encrypted
}

model ProfileLink {
    id        String  @id @default(cuid())
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String
    type      String
    url       String
}

model Project {
    id                      String            @id @default(cuid())
    username                String            @unique
    title                   String
    description             String?
    deadline                DateTime?
    status                  ProjectStatus
    thumbnail               ProjectThumbnail?
    agreements              Agreement[]
    tracks                  Track[]
    discordChannelId        String?           @unique
    discordChannelType      Int?
    discordInvitesChannelId String?           @unique
    createdAt               DateTime          @default(now())
    updatedAt               DateTime          @default(now()) @updatedAt
    closedAt                DateTime?
    releasedAt              DateTime?
}

model ProjectThumbnail {
    id        String  @id @default(cuid())
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String  @unique
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    key       String
}

model Track {
    id               String              @id @default(cuid())
    username         String              @unique
    project          Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId        String
    title            String
    description      String?
    discordChannelId String?             @unique
    collaborators    TrackCollaborator[]
    credits          TrackCredit[]
    musicStatus      TrackMusicStatus
    visualStatus     TrackVisualStatus
    type             TrackType           @default(ORIGINAL)
    auditLogs        TrackAuditLog[]
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @default(now()) @updatedAt
}

model TrackCollaborator {
    id              String                @id @default(cuid())
    track           Track                 @relation(fields: [trackId], references: [id], onDelete: Cascade)
    trackId         String
    user            User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String?
    discordUserId   String?
    discordUsername String?
    discordAvatar   String?
    acceptedInvite  Boolean               @default(false)
    role            TrackCollaboratorRole
    credits         TrackCredit[]
}

model TrackCredit {
    id             String             @id @default(cuid())
    track          Track              @relation(fields: [trackId], references: [id], onDelete: Cascade)
    trackId        String
    collaborator   TrackCollaborator? @relation(fields: [collaboratorId], references: [id])
    collaboratorId String?
    name           String?
    type           String
    value          String?
}

model TrackAuditLog {
    id                    String              @id @default(cuid())
    track                 Track               @relation(fields: [trackId], references: [id], onDelete: Cascade)
    trackId               String
    user                  User?               @relation("User", fields: [userId], references: [id])
    userId                String?
    discordUserId         String?
    discordUsername       String?
    discordAvatar         String?
    targetUser            User?               @relation("TargetUser", fields: [targetUserId], references: [id])
    targetUserId          String?
    targetDiscordUserId   String?
    targetDiscordUsername String?
    targetDiscordAvatar   String?
    action                TrackAuditLogAction
    value                 Json?
    oldValue              Json?
    createdAt             DateTime            @default(now())
    updatedAt             DateTime            @default(now()) @updatedAt

    @@index([trackId])
}

model Agreement {
    id          String              @id @default(cuid())
    project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    templateId  Int                 @unique
    recipientId Int
    title       String
    description String?
    documents   AgreementDocument[]
}

model AgreementDocument {
    id          String    @id @default(cuid())
    agreement   Agreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)
    agreementId String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    email       String
    documentId  Int       @unique
    signingUrl  String
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String              @id @default(cuid())
    name                 String?
    email                String?             @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    profile              Profile?
    agreementDocuments   AgreementDocument[]
    projectThumbnails    ProjectThumbnail[]
    trackCollaborators   TrackCollaborator[]
    trackAuditLogs       TrackAuditLog[]     @relation("User")
    trackAuditLogsTarget TrackAuditLog[]     @relation("TargetUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
