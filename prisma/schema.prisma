// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum AccessRole {
    ADMIN
    ARTIST
}

enum ProfilePrivacy {
    PRIVATE
}

enum ProjectStatus {
    DRAFT
    ACTIVE
    RELEASED
}

model Access {
    id                      String     @id @default(cuid())
    provider                String
    providerAccountId       String
    providerAccountUsername String
    role                    AccessRole
    note                    String?
}

model Profile {
    id        String         @id @default(cuid())
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String         @unique
    username  String         @unique
    name      String
    bio       String?
    legalName String? /// @encrypted
    country   String? /// @encrypted
    email     String /// @encrypted
    phone     String? /// @encrypted
    pro       ProProfile?
    links     ProfileLink[]
    privacy   ProfilePrivacy
    createdAt DateTime       @default(now())
    updatedAt DateTime       @default(now()) @updatedAt
}

model ProProfile {
    id        String  @id @default(cuid())
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String  @unique
    member    String /// @encrypted
    country   String /// @encrypted
    name      String /// @encrypted
    number    String /// @encrypted
}

model ProfileLink {
    id        String  @id @default(cuid())
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String
    type      String
    url       String
}

model Project {
    id          String        @id @default(cuid())
    username    String        @unique
    title       String
    description String?
    deadline    DateTime?
    status      ProjectStatus
    agreements  Agreement[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @default(now()) @updatedAt
}

model Agreement {
    id         String              @id @default(cuid())
    project    Project             @relation(fields: [projectId], references: [id])
    projectId  String
    templateId String
    documents  AgreementDocument[]
}

model AgreementDocument {
    id          String    @id @default(cuid())
    agreement   Agreement @relation(fields: [agreementId], references: [id])
    agreementId String
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    email       String
    documentId  String
    signingUrl  String
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String?
    email             String?             @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    profile           Profile?
    AgreementDocument AgreementDocument[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
